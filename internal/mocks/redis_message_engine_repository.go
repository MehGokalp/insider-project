// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	pkgredis "github.com/mehgokalp/insider-project/internal/domain/redis"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/go-redis/redis/v8"
)

// RedisMessageEngineRepository is an autogenerated mock type for the RedisMessageEngineRepository type
type RedisMessageEngineRepository struct {
	mock.Mock
}

// ListenStatusUpdates provides a mock function with given fields: ctx
func (_m *RedisMessageEngineRepository) ListenStatusUpdates(ctx context.Context) *redis.PubSub {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListenStatusUpdates")
	}

	var r0 *redis.PubSub
	if rf, ok := ret.Get(0).(func(context.Context) *redis.PubSub); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.PubSub)
		}
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx, status
func (_m *RedisMessageEngineRepository) UpdateStatus(ctx context.Context, status pkgredis.MessageEngineRunningStatus) error {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgredis.MessageEngineRunningStatus) error); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisMessageEngineRepository creates a new instance of RedisMessageEngineRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisMessageEngineRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisMessageEngineRepository {
	mock := &RedisMessageEngineRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
